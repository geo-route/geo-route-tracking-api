using System.Text.Json;
using GeoRoute.Platform.Tracking.Data.Dto;

namespace GeoRoute.Platform.Tracking.Api.Middleware;

public class ErrorResponseMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<ErrorResponseMiddleware> _logger;

    public ErrorResponseMiddleware(RequestDelegate next, ILogger<ErrorResponseMiddleware> logger)
    {
        this._next = next;
        this._logger = logger;
    }

    public async Task Invoke(HttpContext ctx)
    {
        try {
            ctx.Request.EnableBuffering();
            await this._next(ctx).ConfigureAwait(false);
        } catch(Exception ex) {
            var response = await RespondErrorAsync(ctx, "Unable to complete request.", 500).ConfigureAwait(false);
            this._logger.LogError(ex, "Uncaught exception. Generated by request: {id:D}", response.Id);
        }
    }

    private static async Task<HttpResult<string>> RespondErrorAsync(HttpContext ctx, string err, int statusCode)
    {
        var id = (Guid)ctx.Items["RequestId"]!;
        var response = new HttpResult<string> { Errors = new List<string>(), Id = id };

        response.Errors.Add(err);
        ctx.Response.Headers["Content-Type"] = "application/json";
        ctx.Response.StatusCode = statusCode;

        await ctx.Response.WriteAsync(JsonSerializer.Serialize(response)).ConfigureAwait(false);
        return response;
    }
}
